/*
 Query for all contacts that do not have a 
 email and/or phone number associated with them, 
 and provide default data for those fields.
*/
public class Completeness {
    
    public void FindAllContacts(){

        for( Contact c : [SELECT Email, Phone FROM Contact]){
            if(c.Email == null){
                c.email= '12345678@gmail.com';
                update c;
            }
            
            if(c.Phone==null){
                c.Phone = '555 555 5555'; 
                update c;
            }
              }  
    }
                          
}


//Query for the accounts you made, and then remove them from the database.
public class DeletAccount {

     Account [] acc;
    public void deleteAcc(){
        acc = [SELECT Id FROM Account WHERE Name LIKE 'Name%'];
        Delete acc;

    }
  }
  
  /*create a class that has a method to add 151 accounts to your org.
These accounts should have unique names.*/

public class PokeMan {
    
    List <account> lists = new List<account>(Integer NumAcc);
    public void AddAccount(){
    
        for(Integer i = 0; i < NumAcc; i++){
          lists.add(new account(Name='PokeMan' + i));
        }
      insert lists; 
    } 

   /* We have received new requirements that the data 
 * in our org needs to meet new completeness 
 * standards. To facilitate this we are going to 
 * use SOQL to check our data and handle it by setting 
 * a default value for the phone to be equal to the related 
 * account, and create a task if it is missing an 
  email for the record owner to update it*/

public class Task {

        
    public void BobStatus(){
        
        for( Contact c : [SELECT Email FROM Contact]){
            if(c.Email == null){
                c.Email= '12345678@gmail.com';
                update c;
            }
        
        }}   
    
    public void creatNcontacts(Integer n){
        List<contact> addCont = new List <contact>();
        for( Integer i = 0; i < n; i++){
            addCont.add(new contact());
            
        }
        update addCont;
        
    }
public class challengeIV {
//Create 200 new contacts, plus update all existing 
//contacts first names to bob. In a single DML 
//update and and add the new contacts.

	List<Contact> cont = new List<Contact>();
    public void createNewAccs(Integer n){
       
      for(Integer i = 0; i < n; i++){
            Contact conts = new Contact();
            cont.add(conts);
      }
        insert cont;
       } 
    
    List<Contact> conta = new List<Contact>();
    public void updateName(){
        for(Contact c : [SELECT Firstname FROM Contact]){
            c.FirstName ='Bob';
            conta.add(c);
        }
        update conta;
    }
    
            
}


    
 
   

  
}

Challenge VI

/*Create a method that creates N number of accounts,
 *  within it call a second method that creates N contacts. Relate the newly 
 * created contacts to the newly created accounts.
 * As a part of this fill out the following fields for each account:
 * Name, annual revenue, phone, and site.Fill out the following fields:
 * Last name, first name, phone, and email.Once these are created ensure 
 * they are inserted into the database.
 * Create a third method that gets all child contacts from the account 
 * using a relationship query, and then changes the contact phone number to the account phone number.
 * Persist these changes.Query for contacts and retrieve each contacts first and last name, and then 
 the related account name, phone, and site. Using system.debug display each of these in a debug log.
*/

public class NumberOf_N_Account {
    
    List<Account> Add_N_Account = new List<Account>();
    public void Create_N_Accounts(Integer num){
        
        for(Integer i = 0; i < num; i++){
            Account acc = new Account();
            acc.name = 'AccountName_' + i;
            acc.Phone = '55'+i + 4 + '43'+ 6+i+'5555';
            acc.AnnualRevenue = 10000 + i + 200;
            acc.Site = 'www.//example_'+ i +'.com';
            Add_N_Account.add(acc);
               
        }
        
        insert Add_N_Account;
        CreateContacts(Add_N_Account);
    }
    
   
    public void CreateContacts(List<Account> acc){
        
        List<Contact> cont = new List<Contact>();
        Integer i=0;
        for(Account co : acc){
            
            Contact newCon = new Contact();
            newCon.FirstName = co.Name + 'endlk  ';
            newCon.LastName = '   Mary';
            newCon.Phone = '555 555 555' + i;
            newCon.Email = i+'1234@yahoo.com';
            newCon.AccountId = co.Id;
            i++;
            cont.add(newCon);
            
              }
        insert cont;
        
         }
    
}
  
